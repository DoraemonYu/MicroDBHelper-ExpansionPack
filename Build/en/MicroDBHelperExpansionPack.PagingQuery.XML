<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MicroDBHelperExpansionPack.PagingQuery</name>
    </assembly>
    <members>
        <member name="T:MicroDBHelpers.ExpansionPack.PagingQuerier">
            <summary>
            Paging Querier
            </summary>
        </member>
        <member name="M:MicroDBHelpers.ExpansionPack.PagingQuerier.Paging``1(System.Int32,System.Int32,System.String,System.String,System.Data.SqlClient.SqlParameter[],System.String,System.Data.CommandType)">
            <summary>
            Paging Datas by Database
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="pageIndex">Current Index</param>
            <param name="pageSize">Size of per Page</param>
            <param name="fixedSql">The Sql which in the Front ( ex.  CTE Query begin with the Keyword "WITH" ) </param>
            <param name="selectSql">The Sql which begin with Keyword "SELECT" </param>
            <param name="paramValues">Parameters</param>
            <param name="connectionAliasName">the Alias Name of Connection (if not pass name,it will use the DEFAULT name instead.)</param>
            <param name="commandType">Text | StoredProcedure</param>
        </member>
        <member name="M:MicroDBHelpers.ExpansionPack.PagingQuerier.PagingAsync``1(System.Int32,System.Int32,System.String,System.String,System.Data.SqlClient.SqlParameter[],System.String,System.Data.CommandType)">
            <summary>
            async Paging Datas by Database
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="pageIndex">Current Index</param>
            <param name="pageSize">Size of per Page</param>
            <param name="fixedSql">The Sql which in the Front ( ex.  CTE Query begin with the Keyword "WITH" ) </param>
            <param name="selectSql">The Sql which begin with Keyword "SELECT" </param>
            <param name="paramValues">Parameters</param>
            <param name="connectionAliasName">the Alias Name of Connection (if not pass name,it will use the DEFAULT name instead.)</param>
            <param name="commandType">Text | StoredProcedure</param>
        </member>
        <member name="M:MicroDBHelpers.ExpansionPack.PagingQuerier.Paging``1(System.Int32,System.Int32,System.String,System.String,System.Data.SqlClient.SqlParameter[],MicroDBHelpers.MicroDBTransaction,System.Data.CommandType)">
            <summary>
            Paging Datas by Database
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="pageIndex">Current Index</param>
            <param name="pageSize">Size of per Page</param>
            <param name="fixedSql">The Sql which in the Front ( ex.  CTE Query begin with the Keyword "WITH" ) </param>
            <param name="selectSql">The Sql which begin with Keyword "SELECT" </param>
            <param name="paramValues">Parameters</param>
            <param name="transaction">transaction</param>
            <param name="commandType">Text | StoredProcedure</param>
        </member>
        <member name="M:MicroDBHelpers.ExpansionPack.PagingQuerier.PagingAsync``1(System.Int32,System.Int32,System.String,System.String,System.Data.SqlClient.SqlParameter[],MicroDBHelpers.MicroDBTransaction,System.Data.CommandType)">
            <summary>
            async Paging Datas by Database
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="pageIndex">Current Index</param>
            <param name="pageSize">Size of per Page</param>
            <param name="fixedSql">The Sql which in the Front ( ex.  CTE Query begin with the Keyword "WITH" ) </param>
            <param name="selectSql">The Sql which begin with Keyword "SELECT" </param>
            <param name="paramValues">Parameters</param>
            <param name="transaction">transaction</param>
            <param name="commandType">Text | StoredProcedure</param>
        </member>
        <member name="M:MicroDBHelpers.ExpansionPack.PagingQuerier.PagingByList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Just a helper function for developers who hope to "Paging Datas in Memory" and use the "PagingResult Model"
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="datas">datas</param>
            <param name="pageIndex">target index</param>
            <param name="pageSize">size of per page</param>
        </member>
        <member name="M:MicroDBHelpers.ExpansionPack.PagingQuerier.DetailPagingAsync``1(MicroDBHelpers.ExpansionPack.PagingQuerier.ExecuteDelegate,System.Int32,System.Int32,System.String,System.String,System.Data.SqlClient.SqlParameter[],System.Data.CommandType)">
            <summary>
            Detail to PagingAsync
            </summary>
        </member>
        <member name="M:MicroDBHelpers.ExpansionPack.PagingQuerier.GetLimitSql(System.String,System.Int32,System.Int32)">
            <summary>
            Create limit sql
            </summary>
            <param name="sql">sql expression</param>
            <param name="pageIndex">the index of page</param>
            <param name="pageSize">the size of each page</param>
        </member>
        <member name="M:MicroDBHelpers.ExpansionPack.PagingQuerier.GetRowNumber(System.String)">
            <summary>
            Get number of row
            </summary>
            <param name="sql">sql expression</param>
        </member>
        <member name="M:MicroDBHelpers.ExpansionPack.PagingQuerier.hasDistinct(System.String)">
            <summary>
            Check is it include "distinct"
            </summary>
            <param name="sql">sql expression</param>
        </member>
        <member name="T:MicroDBHelpers.ExpansionPack.PagingQuerier.ExecuteDelegate">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="T:MicroDBHelpers.ExpansionPack.PagingResult`1">
            <summary>
            The result after Paging Query
            </summary>
        </member>
        <member name="M:MicroDBHelpers.ExpansionPack.PagingResult`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:MicroDBHelpers.ExpansionPack.PagingResult`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:MicroDBHelpers.ExpansionPack.PagingResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="datas">Entitys</param>
            <param name="pageIndex">Current Index</param>
            <param name="pageSize">Size of per Page</param>
            <param name="TotalCount">Count of all items</param>
        </member>
        <member name="P:MicroDBHelpers.ExpansionPack.PagingResult`1.Datas">
            <summary>
            Datas
            </summary>
        </member>
        <member name="P:MicroDBHelpers.ExpansionPack.PagingResult`1.CurrentPageIndex">
            <summary>
            Current Index
            </summary>
        </member>
        <member name="P:MicroDBHelpers.ExpansionPack.PagingResult`1.PageSize">
            <summary>
            Size of per Page
            </summary>
        </member>
        <member name="P:MicroDBHelpers.ExpansionPack.PagingResult`1.TotalItemsCount">
            <summary>
            Count of all items
            </summary>
        </member>
        <member name="P:MicroDBHelpers.ExpansionPack.PagingResult`1.TotalPages">
            <summary>
            Count of all pages
            </summary>
        </member>
    </members>
</doc>
